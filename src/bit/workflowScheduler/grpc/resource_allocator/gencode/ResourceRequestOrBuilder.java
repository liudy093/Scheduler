// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource_allocator.proto

package bit.workflowScheduler.grpc.resource_allocator.gencode;

public interface ResourceRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   *调度器id
   * </pre>
   *
   * <code>string schedulerId = 1;</code>
   */
  java.lang.String getSchedulerId();
  /**
   * <pre>
   *调度器id
   * </pre>
   *
   * <code>string schedulerId = 1;</code>
   */
  com.google.protobuf.ByteString
      getSchedulerIdBytes();

  /**
   * <pre>
   *时间戳
   * </pre>
   *
   * <code>int64 timeStamp = 2;</code>
   */
  long getTimeStamp();

  /**
   * <pre>
   *该调度器当前批次ready_tasks资源请求量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand currentRequest = 3;</code>
   */
  boolean hasCurrentRequest();
  /**
   * <pre>
   *该调度器当前批次ready_tasks资源请求量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand currentRequest = 3;</code>
   */
  bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand getCurrentRequest();
  /**
   * <pre>
   *该调度器当前批次ready_tasks资源请求量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand currentRequest = 3;</code>
   */
  bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemandOrBuilder getCurrentRequestOrBuilder();

  /**
   * <pre>
   *该调度器下一批次ready_tasks资源请求量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand nextRequest = 4;</code>
   */
  boolean hasNextRequest();
  /**
   * <pre>
   *该调度器下一批次ready_tasks资源请求量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand nextRequest = 4;</code>
   */
  bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand getNextRequest();
  /**
   * <pre>
   *该调度器下一批次ready_tasks资源请求量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand nextRequest = 4;</code>
   */
  bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemandOrBuilder getNextRequestOrBuilder();

  /**
   * <pre>
   *当前该调度器所有待分配任务资源请求总量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand allTasksRequest = 5;</code>
   */
  boolean hasAllTasksRequest();
  /**
   * <pre>
   *当前该调度器所有待分配任务资源请求总量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand allTasksRequest = 5;</code>
   */
  bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand getAllTasksRequest();
  /**
   * <pre>
   *当前该调度器所有待分配任务资源请求总量
   * </pre>
   *
   * <code>.bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemand allTasksRequest = 5;</code>
   */
  bit.workflowScheduler.grpc.resource_allocator.gencode.ResourceRequest.resourceDemandOrBuilder getAllTasksRequestOrBuilder();

  /**
   * <pre>
   *time_grade暂时用不到。若customization=true且cost_grade=false，则请求的资源都满足；否则，按之前流程走
   * </pre>
   *
   * <code>bool customization = 6;</code>
   */
  boolean getCustomization();

  /**
   * <pre>
   * 是否存在时间等级
   * </pre>
   *
   * <code>bool time_grade = 7;</code>
   */
  boolean getTimeGrade();

  /**
   * <pre>
   * 是否花费（资金）等级
   * </pre>
   *
   * <code>bool cost_grade = 8;</code>
   */
  boolean getCostGrade();
}
